@using Basyc.Diagnostics.Shared.Durations
@using Basyc.Diagnostics.Shared.Logging
@using Basyc.Diagnostics.Shared;
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Microsoft.Extensions.Logging
@using ReactiveUI;
@using ReactiveUI.Fody.Helpers;
@using System.Collections.ObjectModel;
@inherits BasycReactiveBlazorComponentBase
<logWindowView>
    <toolBar>
        <filterLogLevel>
            <TableFilter TItems="LogLevel" Tooltip="tooltip" SelectedItems="SelectedLogLevels" SelectedItemsChanged="SelectedLogLevelsChanged" />
        </filterLogLevel>
        <BasycSpaceLine Direction="SpaceLineDirection.Vertical" Visible="false" Start="SpaceLineSize.Big" />
        <BasycSpaceLine Direction="SpaceLineDirection.Vertical" Visible="false" Start="SpaceLineSize.Medium" />
        <BasycSpaceLine Direction="SpaceLineDirection.Vertical" Visible="false" Start="SpaceLineSize.Small" />
        <filterService>
            <TableFilter TItems="ServiceIdentity"
                         Tooltip="tooltip"
                         ItemsToSelect="@DiagnosticsContext.Services.Select(x => x.ServiceIdentity).ToArray()"
                         SelectedItems="@SelectedServiceIdentities"
                         SelectedItemsChanged="SelectedServiceIdentitiesChanged"
                         ItemsToSelectDisplayConverter="x => x.ServiceName" />
        </filterService>
    </toolBar>
    <logs>
        @for (var logEntryIndex = 0; logEntryIndex < Logs.Count; logEntryIndex++)
        {
            var logEntry = Logs[logEntryIndex];
            @*var logActivity = logEntry.SpanId is null ? null : DiagnosticsContext.TryGetActivity(logEntry.SpanId) ?;*@
            ActivityContext? logActivity;
            if (logEntry.SpanId is null)
                logActivity = null;
            else
                DiagnosticsContext.TryGetActivity(logEntry.SpanId, out logActivity);

            <LogEntryView AlternateColor="logEntryIndex % 2 != 0" Activity="logActivity" ServiceName="@logEntry.Service.ServiceName" LogTime="@logEntry.Time" LogLevel="@logEntry.LogLevel" LogMessage="@logEntry.Message" />
        }
    </logs>
</logWindowView>


@code {

    [Parameter]
    [EditorRequired]
    public RequestDiagnostic DiagnosticsContext { get; set; } = null!;

    [Parameter]
    public List<LogLevel> SelectedLogLevels { get; set; } = new();

    [Parameter]
    public List<ServiceIdentity> SelectedServiceIdentities { get; set; } = new();

    private List<LogEntry> filteredLogs = new();



    private void SelectedLogLevelsChanged(List<LogLevel> levels)
    {
        SelectedLogLevels = levels;
        UpdateFilteredLogs();
    }

    private void SelectedServiceIdentitiesChanged(List<ServiceIdentity> services)
    {
        SelectedServiceIdentities = services;
        UpdateFilteredLogs();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        LogsCount = this.ReactiveProperty(
            x => x.LogsCount,
            x => x.DiagnosticsContext.LogEntries.Count);

        //Logs = new(new());
        Logs = this.ReactiveCollectionProperty(
            x => x.Logs,
            x => x.DiagnosticsContext.LogEntries,
            x => x);

        //this.ReactiveHandler(x => x.ViewModel.LogsCount, x =>
        //{
        //});

        this.ReactiveHandler(x => x.LogsCount, x =>
        {
        });

        this.PropertyChanged += (s, a) =>
        {

        };
    }

    protected override void OnParametersSet()
    {
        SelectedLogLevels = Enum.GetValues<LogLevel>().ToList();
        SelectedServiceIdentities = DiagnosticsContext.Services.Select(x => x.ServiceIdentity).ToList();
        UpdateFilteredLogs();
        //ViewModel.RequestDiagnostic = DiagnosticsContext;
        base.OnParametersSet();
    }


    private void UpdateFilteredLogs()
    {
        filteredLogs = DiagnosticsContext.LogEntries
            .Where(x => SelectedLogLevels.Contains(x.LogLevel))
            .Where(x => SelectedServiceIdentities.Contains(x.Service))
            .ToList();

    }

}
