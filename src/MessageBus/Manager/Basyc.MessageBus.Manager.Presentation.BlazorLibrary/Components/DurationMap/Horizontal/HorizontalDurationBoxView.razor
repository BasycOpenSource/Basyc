@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.LogIcon
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Collections.ObjectModel;
@using Throw
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers.Htmls
@using Color = Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers.Colors.Color
@using static Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap.Horizontal.LogAggregator;
@implements IDisposable
@{
    if (Activity.HasEnded)
    {
        SetKnownWidth();
    }
    //var opacity = Color.Opacity - (((double)NestingLevel / 5) * Color.Opacity);
    //string durationBoxStyle = $"min-width: {width}; background-color: {Color.Edit(opacity: opacity)};";
    var darkPercentage = (double)NestingLevel / 5;
    if (darkPercentage > 1)
        darkPercentage = 1;
    //string durationBoxStyle = $"min-width: {width}; background-color: {Color.Darker(darkPercentage)};";
    //var durationBoxStyle = $"width: {width}; background-color: {Color.Darker()};";
    var durationBoxStyle = $"width: {width};";
    //var mudTooltipBoxStyle = "display: block; width: 100%; height: 100%; grid-row: 1; grid-column: 1;";
    var activityNameStyle = $"max-width: {width};"; //enabled overflow elipsis
}

<horizontalDurationBoxView>
    <BasycTooltip>
        <TooltipContent>
            <DurationBoxToolTip Name="@Activity.DisplayName"
                                Service="@Activity.Service"
                                StartTime="@Activity.StartTime"
                                Duration="((Activity.EndTime.Value - Activity.StartTime.Value))"
                                ActivityContext="@Activity" />
        </TooltipContent>
        <ChildContent>
            <durationBox style="@durationBoxStyle">
                <stickyContainer>
                    <acitvityName style="@activityNameStyle">
                        @Activity.DisplayName
                    </acitvityName>
                    @if (Activity.HasEnded is false)
                    {
                        <spinner>
                            <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" Size="Size.Small" />
                        </spinner>
                    }
                </stickyContainer>
                <logs>
                    <Virtualize Items="@AggragatedLogs"
                                Context="aggregatedLog"
                                ItemSize="0.001F">
                        <ItemContent>
                            @{
                                var logStartPosition = DurationViewHelper.GetCssDurationValue(aggregatedLog.Time - Activity.StartTime.AbsoluteTime, PixelsPerMs, out var logStartPixels);
                                var logWidth = Math.Max(Math.Min(PixelsPerMs * logWidthMultiplier, logMaxWidthPixels), logMinWidthPixels);
                                var logStyle = $"margin-left: {logStartPosition}; width: {Html.Number(logWidth)}px";
                                var logContentClass = $"logContent--{aggregatedLog.WorstLogLevel}";
                                var legMarginLeft = -(logWidth / 2);
                                if (logStartPixels < legMarginLeft)
                                {
                                    legMarginLeft = 0;
                                }
                                if (logStartPixels > logWidth)
                                {
                                    legMarginLeft = -logWidth;
                                }
                            }
                            <log style="@logStyle">
                                <MudTooltip RootClass="logContentToolTip">
                                    <ChildContent>
                                        <LogIconView LogLevel="aggregatedLog.WorstLogLevel" />
                                    </ChildContent>
                                    <TooltipContent>
                                        <toolTipContent>
                                            @string.Join(", ", aggregatedLog.Logs.Select(x => x.Message))
                                        </toolTipContent>
                                    </TooltipContent>
                                </MudTooltip>
                            </log>
                        </ItemContent>
                        <Placeholder>
                            <loading />
                        </Placeholder>

                    </Virtualize>
                </logs>

            </durationBox>
        </ChildContent>
    </BasycTooltip>

    <nestedDurationBoxes>
        @{
            List<RowViewModel> rows = new();
            rows.Add(new RowViewModel());
            foreach (var nestedActivity in Activity.NestedActivities.OrderBy(x => x.StartTime))
            {
                var nestedActivityLatestEndTime = GetRecursiveLatestEndTime(nestedActivity);
                ;
                var lastRow = rows.Last();
                if (lastRow.LastEndTime == default)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                    lastRow.StartTime = nestedActivity.StartTime.AbsoluteTime;
                    continue;
                }
                var previousActivityInRow = lastRow.Activities.First();
                var diff = Math.Ceiling((nestedActivity.StartTime.AbsoluteTime - lastRow.LastEndTime).TotalMilliseconds);
                var canFitOnSameRow = diff >= 0;
                var startsTheSameAndPreviousHas0Duration = (lastRow.LastEndTime - nestedActivity.StartTime.AbsoluteTime).TotalMilliseconds == 0 && previousActivityInRow.Duration.Ticks == 0;
                if (canFitOnSameRow || startsTheSameAndPreviousHas0Duration)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                }
                else
                {
                    var newRow = new RowViewModel();
                    newRow.LastEndTime = nestedActivityLatestEndTime;
                    newRow.Activities.Add(nestedActivity);
                    newRow.StartTime = nestedActivity.StartTime.AbsoluteTime;
                    rows.Add(newRow);
                }
            }

            RowViewModel? previousRow = null;
            foreach (var row in rows)
            {
                ActivityContext? previousRowActivity = null;
                if (previousRow != null)
                {
                    <rowSplitter />
                }
                <nestedRows>
                    @if (rows.Count > 1)
                    {
                        <treeLeg>
                            <treeHorizontalLine />
                        </treeLeg>
                    }
                    @foreach (var nestedActivity in row.Activities)
                    {
                        <nestedRow>
                            @{
                                var isFirstNested = previousRowActivity is null;
                                if (isFirstNested)
                                {
                                    var lateStartDuration = nestedActivity.StartTime.AbsoluteTime - Activity.StartTime.AbsoluteTime;
                                    if (lateStartDuration > TimeSpan.FromMilliseconds(0))
                                    {
                                        <HorizontalUnknownDurationBoxView StartTime="Activity.StartTime.AbsoluteTime" EndTime="nestedActivity.StartTime.AbsoluteTime" PixelsPerMs="PixelsPerMs" Color="@Color" />
                                    }
                                }


                                var isGapBetweenPreviousNested = previousRowActivity is not null && previousRowActivity.EndTime.Value != nestedActivity.StartTime.Value; ;
                                if (isGapBetweenPreviousNested)
                                {
                                    previousRowActivity.ThrowIfNull();
                                    <HorizontalUnknownDurationBoxView StartTime="previousRowActivity.EndTime.AbsoluteTime" EndTime="nestedActivity.StartTime.AbsoluteTime" PixelsPerMs="PixelsPerMs" Color="@Color" />
                                }
                                <HorizontalDurationBoxView Activity="nestedActivity" PixelsPerMs="PixelsPerMs" Color="@Color" NestingLevel="NestingLevel+1" />

                                previousRowActivity = nestedActivity;

                            }
                        </nestedRow>
                    }
                </nestedRows>
                previousRow = row;
            }

        }
    </nestedDurationBoxes>

</horizontalDurationBoxView>


@code {

    private class RowViewModel
    {
        public DateTimeOffset StartTime { get; set; } = default;
        public DateTimeOffset LastEndTime { get; set; } = default;
        public List<ActivityContext> Activities { get; } = new();
    }


    [Parameter]
    [EditorRequired]
    public ActivityContext Activity { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public double PixelsPerMs { get; set; }

    /// <summary>
    ///     Hexadecimal string
    /// </summary>
    [Parameter]
    [EditorRequired]
    public Color Color { get; set; }

    [Parameter]
    [EditorRequired]
    public int NestingLevel { get; set; }

    private const double logWidthMultiplier = 4;
    private const double logMinWidthPixels = 5;
    private const double logMaxWidthPixels = 10;
    private readonly PeriodicTimer updateUnfinishedTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
    private string width = "0rem";
    private ReadOnlyCollection<AggregatedLog> AggragatedLogs => LogAggregator.AggregateLogs(Activity.Logs, PixelsPerMs, logMinWidthPixels, logMaxWidthPixels, logWidthMultiplier);

    protected override void OnInitialized()
    {
        RunTimer();
        base.OnInitialized();
    }

    protected override Task OnParametersSetAsync()
    {
        Activity.ActivityEnded -= OnActivityEnded;
        Activity.ActivityEnded += OnActivityEnded;
        Activity.NestedActivityEnded -= OnNestedActivityEnded;
        Activity.NestedActivityEnded += OnNestedActivityEnded;
        return base.OnParametersSetAsync();
    }

    private void SetKnownWidth()
    {
        width = DurationViewHelper.GetCssDurationValue(Activity.EndTime.AbsoluteTime - Activity.StartTime.AbsoluteTime, PixelsPerMs, out var widthNumber);
        if (widthNumber < 0.2)
        {
            width = "0.1px";
        }
        if (widthNumber < 2)
        {
            width = "2px";
        }
    }

    private async void RunTimer()
    {
        while (await updateUnfinishedTimer.WaitForNextTickAsync())
        {
            if (Activity.HasEnded)
            {
                updateUnfinishedTimer.Dispose();
                SetKnownWidth();
                break;
            }
            width = DurationViewHelper.GetCssDurationValue(DateTimeOffset.UtcNow - Activity.StartTime.AbsoluteTime, PixelsPerMs, out var widthNumber);
            StateHasChanged();
        }
    }



    private void OnActivityEnded(object? sender, EventArgs e) => StateHasChanged();

    private void OnNestedActivityEnded(object? sender, EventArgs e) => StateHasChanged();

    public void Dispose()
    {
        Activity.ActivityEnded -= OnActivityEnded;
        Activity.NestedActivityEnded -= OnNestedActivityEnded;
        updateUnfinishedTimer.Dispose();
    }

    private static DateTimeOffset GetRecursiveLatestEndTime(ActivityContext activity)
    {
        var latestEndTime = activity.EndTime.AbsoluteTime;
        foreach (var nestedActivity in activity.NestedActivities)
        {
            var nestedLatestEndTime = GetRecursiveLatestEndTime(nestedActivity);
            latestEndTime = latestEndTime > nestedLatestEndTime ? latestEndTime : nestedLatestEndTime;
        }
        return latestEndTime;
    }

}
