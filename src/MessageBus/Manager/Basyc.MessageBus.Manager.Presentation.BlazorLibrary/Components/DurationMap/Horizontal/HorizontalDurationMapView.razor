@using Basyc.Blazor.Controls.Interops;
@using Basyc.Diagnostics.Shared.Logging
@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap;
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers.Colors
<horizontalDurationMapView >
    <zoomToolBar>
        <MudNumericField Format="N2" T="double" @bind-Value="PixelsPerMs" FullWidth="false" Step="10" Style="color: white;" />
    </zoomToolBar>
    <services class="scroll">
        @{
            if (RequestContext.Diagnostics.Services.Any())
            {
                foreach (var service in RequestContext.Diagnostics.Services.Where(x => x.Activities.Any()).OrderBy(x => x.Activities.Min(y => y.StartTime)))
                {
                    var serviceThemeColor = ServiceColorHelper.GetBackground(service.ServiceIdentity.ServiceName);

                    var nameColor = serviceThemeColor.Edit(opacity: 0.3);
                    var borderColor = serviceThemeColor.Edit(opacity: 0.25);
                    var backgroundColor = serviceThemeColor.Edit(opacity: 0.05);

                    var serviceFirstActivity = service.Activities.First();
                    //var serviceStyle = $"margin-left: {DurationViewHelper.GetCssDurationValue(RequestContext.StartTime, serviceFirstActivity.StartTime, PixelsPerMs)}; background-color: {backgroundColor}";
                    var serviceStyle = $"background-color: {backgroundColor}";
                    var durationBoxesStyle = $"margin-left: {DurationViewHelper.GetCssDurationValue(RequestContext.StartTime, serviceFirstActivity.StartTime, PixelsPerMs)};";
                    var serviceNameStyle = $"color: {nameColor}";
                    <service style="@serviceStyle">
                        <serviceNameContainer>
                            <serviceName style="@serviceNameStyle">
                                @service.ServiceIdentity.ServiceName
                            </serviceName>
                        </serviceNameContainer>
                        <durationBoxes style="@durationBoxesStyle">
                            @{
                                ActivityContext? previousActivity = null;
                                foreach (var activity in service.Activities)
                                {
                                    <unknownAndKnowGroup>
                                        @{
                                            var leftMargin = previousActivity == null ? "0px" : DurationViewHelper.GetCssDurationValue(serviceFirstActivity.StartTime, activity.StartTime, PixelsPerMs);
                                            <div style="display: flex; margin-left:@leftMargin;">
                                                @{
                                                    <HorizontalDurationBoxView Activity="activity" PixelsPerMs="PixelsPerMs" Color="@serviceThemeColor" NestingLevel="0" />
                                                    previousActivity = activity;
                                                }
                                            </div>
                                        }
                                    </unknownAndKnowGroup>
                                }
                            }
                        </durationBoxes>
                    </service>
                    <br>
                }
            }
        }
    </services>



</horizontalDurationMapView>

@code {
    [Inject] private BusManagerJsInterop BusManagerJsInterop { get; set; } = null!;
    [Inject] private ScrollJsInterop ScrollJsInterop { get; set; } = null!;


    [Parameter]
    [EditorRequired]
    public MessageRequest RequestContext { get; set; } = null!;

    [Parameter]
    public double PixelsPerMs { get; set; } = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        ScrollJsInterop.AddDragToScroll(".scroll");

    }

    protected override void OnParametersSet()
    {
        RequestContext.Diagnostics.ActivityStartAdded -= OnActivityStartAdded;
        RequestContext.Diagnostics.ActivityStartAdded += OnActivityStartAdded;
        RequestContext.Diagnostics.ActivityEndAdded -= OnActivityEneAdded;
        RequestContext.Diagnostics.ActivityEndAdded += OnActivityEneAdded;
        base.OnParametersSet();
    }

    private void OnActivityStartAdded(object? sender, ActivityStart activityStart)
    {
        StateHasChanged();
    }

    private void OnActivityEneAdded(object? sender, ActivityEnd activityEnd)
    {
        StateHasChanged();
    }

    private void OnZoomInClick(MouseEventArgs args)
    {
        PixelsPerMs += 0.1;
    }

    private void OnZoomOutClick(MouseEventArgs args)
    {
        PixelsPerMs -= 0.1;
        if (PixelsPerMs < 0)
            PixelsPerMs = 0;
    }

}
