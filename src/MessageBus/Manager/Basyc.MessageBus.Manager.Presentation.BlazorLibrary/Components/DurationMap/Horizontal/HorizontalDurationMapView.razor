@using Basyc.Diagnostics.Shared.Logging
@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers.Colors
<horizontalDurationMapView>
	<services>
		@{
			if (RequestContext.Diagnostics.Services.Any())
			{
				foreach (var service in RequestContext.Diagnostics.Services.Where(x => x.Activities.Any()).OrderBy(x => x.Activities.Min(y => y.StartTime)))
				{
					var serviceThemeColor = ServiceColorHelper.GetBackground(service.ServiceIdentity.ServiceName);

					var nameColor = serviceThemeColor.Edit(opacity: 0.3);
					var borderColor = serviceThemeColor.Edit(opacity: 0.25);
					var backgroundColor = serviceThemeColor.Edit(opacity: 0.05);

					var serviceFirstActivity = service.Activities.First();
					var serviceStyle = $"margin-left: {DurationViewHelper.GetCssDurationValue(RequestContext.StartTime, serviceFirstActivity.StartTime, PixelsPerMs)}; background-color: {backgroundColor}; box-shadow: 0px 0px 0px 1px {borderColor};";
					var serviceNameStyle = $"color: {nameColor}";
					<service style="@serviceStyle">
						<serviceNameContainer>
							<serviceName style="@serviceNameStyle">
								@service.ServiceIdentity.ServiceName
							</serviceName>
						</serviceNameContainer>
						<durationBoxes>
							@{
								ActivityContext? previousActivity = null;
								foreach (var activity in service.Activities)
								{
									<unknownAndKnowGroup>
										@{
											var leftMargin = previousActivity == null ? "0px" : DurationViewHelper.GetCssDurationValue(serviceFirstActivity.StartTime, activity.StartTime, PixelsPerMs);
											<div style="display: flex; margin-left:@leftMargin;">
												@{
													<HorizontalDurationBoxView Activity="activity" PixelsPerMs="PixelsPerMs" Color="@serviceThemeColor" NestingLevel="0"/>
													previousActivity = activity;
												}
											</div>
										}
									</unknownAndKnowGroup>
								}
							}
						</durationBoxes>
					</service>
					<br>
				}
			}
		}
	</services>

	<zoomToolBar>
		<MudNumericField Format="N2" T="double" @bind-Value="PixelsPerMs" FullWidth="false" Step="0.1" Style="color: white;"/>
	</zoomToolBar>

</horizontalDurationMapView>


@code {

	[Parameter]
	[EditorRequired]
	public RequestContext RequestContext { get; set; } = null!;

	[Parameter]
	public double PixelsPerMs { get; set; } = 1;

	protected override void OnParametersSet()
	{
		RequestContext.Diagnostics.ActivityStartReceived -= OnActivityStartReceived;
		RequestContext.Diagnostics.ActivityStartReceived += OnActivityStartReceived;
		RequestContext.Diagnostics.ActivityEndReceived -= OnActivityEneReceived;
		RequestContext.Diagnostics.ActivityEndReceived += OnActivityEneReceived;
		base.OnParametersSet();
	}

	private void OnActivityStartReceived(object? sender, ActivityStart activityStart)
	{
		StateHasChanged();
	}

	private void OnActivityEneReceived(object? sender, ActivityEnd activityEnd)
	{
		StateHasChanged();
	}

	private void OnZoomInClick(MouseEventArgs args)
	{
		PixelsPerMs += 0.1;
	}

	private void OnZoomOutClick(MouseEventArgs args)
	{
		PixelsPerMs -= 0.1;
		if (PixelsPerMs < 0)
			PixelsPerMs = 0;
	}

}