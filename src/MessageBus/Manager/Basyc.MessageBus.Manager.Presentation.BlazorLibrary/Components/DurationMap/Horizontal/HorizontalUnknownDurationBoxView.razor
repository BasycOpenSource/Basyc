@using Basyc.Blazor.Controls.HtmlExtensions;
@using Basyc.Blazor.Controls.Interops;
@using Basyc.Blazor.Interops
@using Color = Basyc.Blazor.Controls.Colors.Color
@{
    var duration = EndTime - StartTime;
}
<horizontalUnknownDurationBoxView @ref=horizontalUnknownDurationBoxViewref>
    <MudTooltip Arrow="true" RootStyle="height: 100%; width: 100%; display: block;">
        <ChildContent>
            <unknownDurationLineContainer>
                <unknownDurationLine />
            </unknownDurationLineContainer>
        </ChildContent>
        <TooltipContent>
            <toolTipContent>
                name: unknown duration
                <br />
                start: @StartTime.ToString("hh:mm:ss:fff")
                <br />
                end: @EndTime.ToString("hh:mm:ss:fff")
                <br />
                dur: @duration.TotalMilliseconds ms
            </toolTipContent>
        </TooltipContent>
    </MudTooltip>
</horizontalUnknownDurationBoxView>


@code {
    ElementReference horizontalUnknownDurationBoxViewref;
    [Inject] public ElementInterop ElementJsInterop { get; init; } = null!;

    [Parameter, EditorRequired] public DateTimeOffset StartTime { get; init; }
    [Parameter, EditorRequired] public DateTimeOffset EndTime { get; init; }
    //[Parameter, EditorRequired] public double PixelsPerMs { get; set; }
    /// <summary>
    ///Hexadecimal string
    /// </summary>
    [Parameter, EditorRequired] public Color Color { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var timeSpanMs = Html.Methods.NumberToHtml(Math.Round((EndTime - StartTime).TotalMicroseconds));
        //horizontalUnknownDurationBoxViewref.SetCssVariable(DurationMapConstants.TimeSpanCssVarName, timeSpanMs);
        await ElementJsInterop.SetCssVariable(horizontalUnknownDurationBoxViewref, DurationMapConstants.ActivityDurationMsCssVar, timeSpanMs);
    }
}
