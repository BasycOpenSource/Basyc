@using BlazorComponentUtilities;

@namespace Basyc.Blazor.Controls

<basycSpaceBorder class="@classToRender" style="@styleToRender">
    @ChildContent
</basycSpaceBorder>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public SpacerSize Size { get; set; }

    private SpacerSize? sizeTop;
    [Parameter]
    public SpacerSize SizeTop
    {
        get => sizeTop ?? Size;
        set => sizeTop = value;
    }

    private SpacerSize? sizeBottom;
    [Parameter]
    public SpacerSize SizeBottom
    {
        get => sizeBottom ?? Size;
        set => sizeBottom = value;
    }

    private SpacerSize? sizeLeft;
    [Parameter]
    public SpacerSize SizeLeft
    {
        get => sizeLeft ?? Size;
        set => sizeLeft = value;
    }

    private SpacerSize? sizeRight;
    [Parameter]
    public SpacerSize SizeRight
    {
        get => sizeRight ?? Size;
        set => sizeRight = value;
    }

    [Parameter]
    public bool StretchHeight { get; set; }


    private string classToRender = "";
    private string styleToRender = "";
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        classToRender = new CssBuilder()
            .AddClass("basycSpaceBorder--strechHeight", StretchHeight)
            .Build();

        styleToRender = $"padding-top: {GetSizeCssVariable(SizeTop)}; padding-bottom: {GetSizeCssVariable(SizeBottom)}; padding-left: {GetSizeCssVariable(SizeLeft)}; padding-right: {GetSizeCssVariable(SizeRight)};";

    }

    private static string GetSizeCssVariable(SpacerSize size) => size switch
    {
        SpacerSize.None => "0px",
        SpacerSize.Small => "var(--space-small)",
        SpacerSize.Medium => "var(--space-medium)",
        SpacerSize.Big => "var(--space-big)",
        _ => throw new ArgumentException()
    };
}
