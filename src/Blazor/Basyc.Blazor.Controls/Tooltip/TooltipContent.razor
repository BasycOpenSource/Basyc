@using Microsoft.Extensions.Logging;
@implements IHandleEvent
@inject ILogger<TooltipContent> logger;
<tooltipContentComponent @onmousemove="MouseMove"
                         @onmouseout="MouseOut"
                         @onmouseover="MouseOver">
    @ChildContent
</tooltipContentComponent>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; } = null;
    [Parameter, EditorRequired] public TooltipPartsMessenger Messenger { get; set; } = null!;

    protected override void OnInitialized()
    {
        logger.LogDebug(nameof(OnInitialized));
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        logger.LogDebug(nameof(OnParametersSet));
        base.OnParametersSet();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        logger.LogDebug(nameof(OnAfterRender));
        base.OnAfterRender(firstRender);
    }



    private void MouseOver(MouseEventArgs e)
    {
        Messenger.OnMouseOver(e);
    }

    private void MouseMove(MouseEventArgs e)
    {
        Messenger.OnMouseMove(e);
    }


    private void MouseOut(MouseEventArgs e)
    {
        Messenger.OnMouseOut(e);
    }

    Task IHandleEvent.HandleEventAsync(
        EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);
}
